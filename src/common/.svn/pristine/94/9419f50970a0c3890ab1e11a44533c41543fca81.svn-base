package common;

import java.rmi.Remote;
import java.rmi.RemoteException;
import common.message.GroupDataPacket;

import provided.datapacket.*;

/**
 * IMember defines the API for game members to receive a data transfer.
 * 
 * There is an local IMember instance associated with each chatroom representing game groups (which, 
 * in turn, is likely associated with a mini MVC). A stub of IMember is held by the other members
 * of the chatroom in their instance of IChatroom, allowing them to communicate.
 * 
 */
public interface IMember extends Remote {
	
	/**
	 * Receive a datapacket (from another member of the chat room) to this 
	 * IMember and processes it.
	 * 
	 * @param dp The datapacket to receive
	 * @throws RemoteException if an error occurs with remote connections.
	 */
	void receiveData(GroupDataPacket<? extends IDataPacketData> dp) throws RemoteException;
	
	/**
	 * Access method for the name of a member
	 * 
	 * @return the member's name
	 * @throws RemoteException if an error occurs with remote connections.
	 */
	String getName() throws RemoteException;

	/**
	 * This method allows Users who only have access to each others' IMember stubs
	 * to communicate at the IStaffImplRemoteConnection level, i.e. communication outside 
	 * any particular chatroom. This allows peers to "walk the graph".
	 * @return The IStaffImplRemoteConnection of the system that owns this IMember.
	 * @throws RemoteException if an error occurs with remote connections.
	 */
	IRemoteConnection getRemoteConnection() throws RemoteException;

}